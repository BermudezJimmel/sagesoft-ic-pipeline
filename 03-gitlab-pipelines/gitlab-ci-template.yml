# GitLab CI/CD Pipeline Template
# Copy this to each microservice repository

stages:
  - build
  - deploy-staging
  - deploy-production

variables:
  AWS_DEFAULT_REGION: ap-southeast-1
  ECR_REGISTRY: 795189341938.dkr.ecr.ap-southeast-1.amazonaws.com
  ECS_CLUSTER: ic-microservices-cluster
  
# Build Stage
build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - apk add --no-cache aws-cli
    - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
  script:
    - echo "Building $CI_PROJECT_NAME..."
    - docker build -t $CI_PROJECT_NAME:$CI_COMMIT_SHA .
    - docker tag $CI_PROJECT_NAME:$CI_COMMIT_SHA $ECR_REGISTRY/$CI_PROJECT_NAME:$CI_COMMIT_SHA
    - docker tag $CI_PROJECT_NAME:$CI_COMMIT_SHA $ECR_REGISTRY/$CI_PROJECT_NAME:latest
    - docker push $ECR_REGISTRY/$CI_PROJECT_NAME:$CI_COMMIT_SHA
    - docker push $ECR_REGISTRY/$CI_PROJECT_NAME:latest
  only:
    - main
    - develop

# Deploy to Staging
deploy-staging:
  stage: deploy-staging
  image: amazon/aws-cli:latest
  before_script:
    - yum install -y jq
  script:
    - echo "Deploying $CI_PROJECT_NAME to staging..."
    - |
      aws ecs update-service \
        --cluster $ECS_CLUSTER \
        --service ${CI_PROJECT_NAME}-staging \
        --force-new-deployment \
        --region $AWS_DEFAULT_REGION
    - |
      aws ecs wait services-stable \
        --cluster $ECS_CLUSTER \
        --services ${CI_PROJECT_NAME}-staging \
        --region $AWS_DEFAULT_REGION
  only:
    - develop
  when: manual

# Deploy to Production
deploy-production:
  stage: deploy-production
  image: amazon/aws-cli:latest
  before_script:
    - yum install -y jq
  script:
    - echo "Deploying $CI_PROJECT_NAME to production..."
    - |
      # Update task definition with new image
      TASK_DEFINITION=$(aws ecs describe-task-definition \
        --task-definition ${CI_PROJECT_NAME}-prod \
        --region $AWS_DEFAULT_REGION)
      
      NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$ECR_REGISTRY/$CI_PROJECT_NAME:$CI_COMMIT_SHA" \
        '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.placementConstraints) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')
      
      aws ecs register-task-definition \
        --cli-input-json "$NEW_TASK_DEFINITION" \
        --region $AWS_DEFAULT_REGION
    - |
      # Update service with circuit breaker for rollback
      aws ecs update-service \
        --cluster $ECS_CLUSTER \
        --service ${CI_PROJECT_NAME}-prod \
        --task-definition ${CI_PROJECT_NAME}-prod \
        --deployment-configuration "deploymentCircuitBreaker={enable=true,rollback=true},maximumPercent=200,minimumHealthyPercent=50" \
        --region $AWS_DEFAULT_REGION
    - |
      # Wait for deployment to complete
      aws ecs wait services-stable \
        --cluster $ECS_CLUSTER \
        --services ${CI_PROJECT_NAME}-prod \
        --region $AWS_DEFAULT_REGION
  only:
    - main
  when: manual
  
# Rollback job (manual trigger)
rollback-production:
  stage: deploy-production
  image: amazon/aws-cli:latest
  script:
    - echo "Rolling back $CI_PROJECT_NAME production deployment..."
    - |
      aws ecs update-service \
        --cluster $ECS_CLUSTER \
        --service ${CI_PROJECT_NAME}-prod \
        --force-new-deployment \
        --region $AWS_DEFAULT_REGION
  when: manual
  only:
    - main
